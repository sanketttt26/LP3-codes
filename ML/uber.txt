import seaborn as sns
import matplotlib as mpl
import random as rd
import matplotlib.pyplot as plt

df = pd.read_csv("D:\\books sem5\\books sem 7\\Practical Docs\\LP3\\ML\\uber.csv")
df.head()

df = df.drop(['Unnamed: 0', 'key', 'pickup_datetime'], axis = 1)
df.dropna(inplace=True)

sns.boxplot(df['fare_amount'])

low = df['fare_amount'].quantile(0.05)
high = df['fare_amount'].quantile(0.95)
df = df[(df['fare_amount'] > low) & (df['fare_amount'] < high)]

sns.boxplot(df['fare_amount'])

plt.boxplot(df['fare_amount'])

corr = df.corr()
sns.heatmap(corr, annot=True) 

from sklearn.model_selection import train_test_split
X = df.drop(['fare_amount'], axis=1)
y = df['fare_amount']
X_train, x_test, y_train, y_test = train_test_split(X, y)

from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(x_test)

from sklearn.metrics import mean_squared_error, r2_score
RMSE = np.sqrt(mean_squared_error(y_test, y_pred))
print("RMSE -> ", RMSE)
R2 = r2_score(y_test, y_pred)
print("R2 -> ", R2)

from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor()
model.fit(X_train, y_train)
y_pred_rf = model.predict(x_test)

from sklearn.metrics import mean_squared_error, r2_score
RMSE = np.sqrt(mean_squared_error(y_test, y_pred))
print("RMSE -> ", RMSE)
R2 = r2_score(y_test, y_pred_rf)
print("R2 -> ", R2)

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, alpha=0.5, color='blue', label='Linear Regression Predictions')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', linewidth=2, color='red', label='Perfect Prediction Line')
plt.xlabel("Actual Fare Amount")
plt.ylabel("Predicted Fare Amount")
plt.title("Linear Regression - Predictions vs. Actual Values")
plt.legend()
plt.show()

y_pred_rf = model.predict(x_test)

plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred_rf, alpha=0.5, color='green', label='Random Forest Predictions')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', linewidth=2, color='red', label='Perfect Prediction Line')
plt.xlabel("Actual Fare Amount")
plt.ylabel("Predicted Fare Amount")
plt.title("Random Forest Regression - Predictions vs. Actual Values")
plt.legend()
plt.show()

# Select a sample index from the test set
sample_index = 4  # You can change this index to view other samples

# Get the actual value
actual_value = y_test.iloc[sample_index]

# Get the predicted values from both models
predicted_value_lr = y_pred[sample_index]          # Linear Regression prediction
predicted_value_rf = y_pred_rf[sample_index]       # Random Forest prediction

# Print out the values
print(f"Sample {sample_index + 1}")
print(f"Actual Fare Amount: {actual_value}")
print(f"Linear Regression Predicted Fare Amount: {predicted_value_lr}")
print(f"Random Forest Predicted Fare Amount: {predicted_value_rf}")

